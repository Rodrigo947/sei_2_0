// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum NivelAcesso {
  SIGILOSO
  RESTRITO
  PUBLICO
}

enum Grupo {
  PESSOAL
  GESTAO
}

enum TipoRelacao {
  PROPRIETARIO
  INTERESSADO
}

model Unidade {
  id                          String                        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nome                        String                        @db.VarChar(255)
  sigla                       String                        @unique @db.VarChar(255)
  cep                         String                        @db.VarChar(8)
  logradouro                  String                        @db.VarChar(30)
  numero                      String                        @db.VarChar(50)
  complemento                 String?                       @db.VarChar(50)
  bairro                      String                        @db.VarChar(255)
  cidade                      String                        @db.VarChar(255)
  uf                          String                        @db.VarChar(2)
  telefone                    String                        @db.VarChar(30)
  ProcessoConcluidoUnidade    ProcessoConcluidoUnidade[]
  UnidadeInteressadoDocumento UnidadeInteressadoDocumento[]

  @@map("unidade")
}

model Usuario {
  id                         String                       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nome                       String                       @db.VarChar(255)
  sobrenome                  String                       @db.VarChar(255)
  cpf                        String                       @unique @db.VarChar(11)
  senha                      String                       @db.VarChar(255)
  rg                         String                       @unique @db.VarChar(8)
  orgao_expeditor            String                       @db.VarChar(30)
  telefone                   String                       @db.VarChar(30)
  cep                        String                       @db.VarChar(8)
  logradouro                 String                       @db.VarChar(30)
  numero                     String                       @db.VarChar(50)
  complemento                String?                      @db.VarChar(50)
  bairro                     String                       @db.VarChar(255)
  cidade                     String                       @db.VarChar(255)
  uf                         String                       @db.VarChar(2)
  Documento                  Documento[]
  AssinaturaDocumentoUsuario AssinaturaDocumentoUsuario[]
  Notificacao                Notificacao[]
  UsuarioRelacaoProcesso     UsuarioRelacaoProcesso[]

  @@map("usuario")
}

model Processo {
  id               String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  protocolo        Int         @unique @default(autoincrement())
  id_tipo_processo String      @db.Uuid
  especificacao    String      @db.VarChar(255)
  nivel_acesso     NivelAcesso
  concluido        Boolean     @default(false)

  tipo_processo            TipoProcesso               @relation(fields: [id_tipo_processo], references: [id])
  Notificacao              Notificacao[]
  ProcessoConcluidoUnidade ProcessoConcluidoUnidade[]
  Documento                Documento[]
  UsuarioRelacaoProcesso   UsuarioRelacaoProcesso[]

  @@map("processo")
}

model TipoProcesso {
  id       String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nome     String     @db.VarChar(255)
  grupo    Grupo
  Processo Processo[]

  @@map("tipo_processo")
}

model Documento {
  id                 String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nome_arquivo       String      @db.VarChar(255)
  observacao         String      @db.VarChar(255)
  id_tipo_documento  String      @db.Uuid
  nivel_de_acesso    NivelAcesso
  id_usuario_criador String      @db.Uuid
  id_processo        String      @db.Uuid

  usuario_criador             Usuario                       @relation(fields: [id_usuario_criador], references: [id])
  tipo_documento              TipoDocumento                 @relation(fields: [id_tipo_documento], references: [id])
  processo                    Processo                      @relation(fields: [id_processo], references: [id])
  AssinaturaDocumentoUsuario  AssinaturaDocumentoUsuario[]
  UnidadeInteressadoDocumento UnidadeInteressadoDocumento[]

  @@map("documento")
}

model TipoDocumento {
  id        String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nome      String      @db.VarChar(255)
  Documento Documento[]

  @@map("tipo_documento")
}

model AssinaturaDocumentoUsuario {
  id           String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  id_usuario   String @db.Uuid
  id_documento String @db.Uuid

  usuario   Usuario   @relation(fields: [id_usuario], references: [id])
  documento Documento @relation(fields: [id_documento], references: [id])

  @@map("assinatura_documento_usuario")
}

model Notificacao {
  id       String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  mensagem String @db.VarChar(255)

  id_usuario  String @db.Uuid
  id_processo String @db.Uuid

  usuario  Usuario  @relation(fields: [id_usuario], references: [id])
  processo Processo @relation(fields: [id_processo], references: [id])

  @@map("notificacao")
}

model ProcessoConcluidoUnidade {
  id          String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  concluido   Boolean @default(false)
  id_processo String  @db.Uuid
  id_unidade  String  @db.Uuid

  processo Processo @relation(fields: [id_processo], references: [id])
  unidade  Unidade  @relation(fields: [id_unidade], references: [id])

  @@map("processo_concluido_unidade")
}

model UnidadeInteressadoDocumento {
  id           String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  id_unidade   String @db.Uuid
  id_documento String @db.Uuid

  unidade   Unidade   @relation(fields: [id_unidade], references: [id])
  documento Documento @relation(fields: [id_documento], references: [id])

  @@map("unidade_interessado_documento")
}

model UsuarioRelacaoProcesso {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  motivo       String      @db.VarChar(255)
  tipo_relacao TipoRelacao
  id_usuario   String      @db.Uuid
  id_processo  String      @db.Uuid

  usuario  Usuario  @relation(fields: [id_usuario], references: [id])
  processo Processo @relation(fields: [id_processo], references: [id])

  @@map("usuario_relacao_processo")
}
